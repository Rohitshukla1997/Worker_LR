import { useCallback, useContext } from 'react';
import { jsPDF } from 'jspdf';
import 'jspdf-autotable';
import { toast } from 'react-toastify';
import logo from '../../assets/brand/fmslogo1.png';
import { jwtDecode } from 'jwt-decode';
import { TokenContext } from '../../context/TokenContext';

// Helper: Fetch image and convert to base64 if needed
const loadImageAsBase64 = async (url) => {
    if (url.startsWith('data:image')) {
        return url; // Already base64
    }
    const response = await fetch(url);
    const blob = await response.blob();
    return new Promise((resolve) => {
        const reader = new FileReader();
        reader.onloadend = () => resolve(reader.result);
        reader.readAsDataURL(blob);
    });
};

const usePdfExporter = () => {
    const token = useContext(TokenContext);
    const decodedToken = token ? jwtDecode(token) : null;
    const username = decodedToken?.username || 'Unknown User';

    const exportToPDF = useCallback(
        async ({
            title, // Custom Title
            columns = [], // Table Columns
            data = [], // Table Data
            metaData = {}, // Extra Metadata
            fileName, // PDF File Name
            config = {}, // Custom Configurations
        }) => {
            try {
                if (!Array.isArray(data) || data.length === 0) {
                    toast.error('No data available for PDF export');
                    return;
                }

                // Default Configuration
                const CONFIG = {
                    colors: {
                        primary: [10, 45, 99],
                        border: [220, 220, 220],
                        background: [249, 250, 251],
                    },
                    company: {
                        name: 'FMS (Fleet Management System)',
                        logo: {
                            x: 12,
                            y: 12,
                            width: 14,
                            height: 11,
                            url: logo
                        },
                    },
                    layout: {
                        margin: 16,
                    },
                    fonts: {
                        primary: 'helvetica',
                    },
                    orientation: 'landscape',
                    ...config,
                };

                const doc = new jsPDF({
                    orientation: CONFIG.orientation,
                    unit: 'mm',
                    format: 'a4',
                });

                // --- Header with Logo ---
                if (CONFIG.company.logo.url) {
                    try {
                        const logoBase64 = await loadImageAsBase64(CONFIG.company.logo.url);
                        doc.addImage(
                            logoBase64,
                            'PNG',
                            CONFIG.company.logo.x,
                            CONFIG.company.logo.y,
                            CONFIG.company.logo.width,
                            CONFIG.company.logo.height
                        );
                    } catch (err) {
                        console.warn('Logo load failed:', err);
                    }
                }

                // Company Name
                doc.setFont(CONFIG.fonts.primary, 'bold');
                doc.setFontSize(16);
                doc.text(CONFIG.company.name, 28, 21);
                doc.setDrawColor(...CONFIG.colors.primary);
                doc.line(CONFIG.layout.margin, 25, doc.internal.pageSize.width - CONFIG.layout.margin, 25);

                // --- Title ---
                doc.setFontSize(24);
                doc.text(title, CONFIG.layout.margin, 35);

                // --- Username below Title ---
                doc.setFontSize(12);
                doc.setFont(CONFIG.fonts.primary, 'normal');
                doc.text(`Generated by: ${username}`, CONFIG.layout.margin, 42);

                // --- Date in Top-Right ---
                const currentDate = new Date().toLocaleDateString('en-GB');
                const dateText = `Generated: ${currentDate}`;
                doc.setFontSize(10);
                doc.text(
                    dateText,
                    doc.internal.pageSize.width - CONFIG.layout.margin - doc.getTextWidth(dateText),
                    21
                );

                // --- Table Data ---
                const tableColumns = ['SN', ...columns.map((col) => col.label)];
                const tableRows = data.map((row, index) => [
                    index + 1,
                    ...columns.map((col) => row[col.key] || 'N/A'),
                ]);

                doc.autoTable({
                    startY: 50,
                    head: [tableColumns],
                    body: tableRows,
                    theme: 'grid',
                    styles: {
                        fontSize: 10,
                        halign: 'center',
                        lineColor: CONFIG.colors.border,
                        lineWidth: 0.1,
                    },
                    headStyles: {
                        fillColor: CONFIG.colors.primary,
                        textColor: 255,
                        fontStyle: 'bold',
                    },
                    alternateRowStyles: {
                        fillColor: CONFIG.colors.background,
                    },
                    margin: { left: CONFIG.layout.margin, right: CONFIG.layout.margin },
                });

                // --- Metadata ---
                if (metaData && Object.keys(metaData).length > 0) {
                    doc.setFontSize(10);
                    doc.setFont(CONFIG.fonts.primary, 'bold');
                    let yPosition = doc.lastAutoTable.finalY + 10;
                    const xPosition = 15;
                    Object.keys(metaData).forEach((key) => {
                        doc.text(`${key}: ${metaData[key]}`, xPosition, yPosition);
                        yPosition += 6;
                    });
                }

                // --- Footer ---
                const pageCount = doc.getNumberOfPages();
                for (let i = 1; i <= pageCount; i++) {
                    doc.setPage(i);
                    doc.setDrawColor(...CONFIG.colors.border);
                    doc.line(
                        CONFIG.layout.margin,
                        doc.internal.pageSize.height - 15,
                        doc.internal.pageSize.width - CONFIG.layout.margin,
                        doc.internal.pageSize.height - 15
                    );
                    doc.setFontSize(9);
                    doc.text(`Â© ${CONFIG.company.name}`, CONFIG.layout.margin, doc.internal.pageSize.height - 10);
                    const pageNumber = `Page ${i} of ${pageCount}`;
                    doc.text(
                        pageNumber,
                        doc.internal.pageSize.width - CONFIG.layout.margin - doc.getTextWidth(pageNumber),
                        doc.internal.pageSize.height - 10
                    );
                }

                doc.save(`${fileName}_${new Date().toISOString().split('T')[0]}.pdf`);
                toast.success('PDF downloaded successfully');
            } catch (error) {
                console.error('PDF Export Error:', error);
                toast.error(error.message || 'Failed to export PDF');
            }
        },
        [username]
    );

    return { exportToPDF };
};

export default usePdfExporter;
